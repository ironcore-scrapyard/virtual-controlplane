apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kine.fullname" . }}
  labels:
    {{- include "kine.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "kine.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kine.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kine.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command:
          - /bin/kine
          - --endpoint={{ .values.db.protocol }}://{{ .Values.db.user }}@{{ .Values.db.host }}:{{ .Values.db.port }}/{{ .Values.db.database }}
          - --ca-file=/etc/dbcerts/ca
          - --cert-file=/etc/dbcerts/crt
          - --key-file=/etc/dbcerts/key
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 2379
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -ec
              - ETCDCTL_API=3 etcdctl --endpoints=http://[127.0.0.1]:2379
                get foo
            failureThreshold: 8
            initialDelaySeconds: 15
            timeoutSeconds: 15
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: dbcerts
            mountPath: "/etc/dbcerts"
            readOnly: true
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: dbcerts
        secret:
          secretName: secret-db-certs
          defaultMode: 0600

